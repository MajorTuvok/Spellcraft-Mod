buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
if (    !project.hasProperty('mod_pgroup') ||
        !project.hasProperty('mod_id') ) {
    throw new Exception("Missing Mod-Properties!");
}
if (    !project.hasProperty('ver_forge') ||
        !project.hasProperty('ver_mc')) {
    println "missing Minecraft Version!"
}
if (    !project.hasProperty('ver_mappings') ) {
    println "missing Mappings Version!"
}
if (    !project.hasProperty('ver_major_mod') ||
        !project.hasProperty('ver_major_api') ||
        !project.hasProperty('ver_minor_api') ||
        (System.getenv('BUILD_NUMBER')==null && !project.hasProperty('ver_build'))) {
    println "missing Project Version!"
} else if (System.getenv('BUILD_NUMBER')==null) {
    println "Cannot access Build Number!"
}


minecraft {
    version = ver_mc+"-"+ver_forge
    /*
    version = "1.12.2-14.23.3.2655"

    if (project.hasProperty('ver_mc') && project.hasProperty('ver_forge')) {

    } else {
        print "Versions were unavailable - "
    }*/
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180201"
    if (project.hasProperty('ver_mappings')) {
        mappings = "${ver_mappings}"
    }
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

String getVersion() {
    if (    !project.hasProperty('ver_major_mod') ||
            !project.hasProperty('ver_major_api') ||
            !project.hasProperty('ver_minor_api') ||
            (System.getenv('BUILD_NUMBER')==null && !project.hasProperty('ver_build'))) {
        return "CUSTOM_BUILD";
    }
    String res = "${ver_major_mod}.${ver_major_api}.${ver_minor_api}."
    setBuildNumber()
    res+=ver_build
    ver_code = res;
    updateProperties()
    return res;
}

class OrderedProperties extends Properties {
    private final LinkedHashSet<Object> keyOrder = new LinkedHashSet<>();

    @Override
    public synchronized Enumeration<Object> keys() {
        return Collections.enumeration(keyOrder);
    }

    @Override
    public synchronized Object put(Object key, Object value) {
        keyOrder.add(key);
        return super.put(key, value);
    }
}

void setBuildNumber() {
    if (System.getenv('BUIlD_NUMBER')!=null) {
        ver_build = System.getenv('BUIlD_NUMBER')
    } else {
        ver_build = (ver_build.toInteger()+1).toString()
    }
}

void updateProperties() {
    File file = new File('gradle.properties')
    if (!file.exists()) {
        println "gradle.properties file does not exist. Please create in order to update build number!"
        return
    }
    if (!file.canWrite()) {
        println "gradle.properties file cannot be written to. Please allow write access in order to update build number!"
        return
    }
    OrderedProperties properties = new OrderedProperties();

    properties.load(new FileInputStream(file))
    properties.setProperty('ver_build',ver_build)
    properties.setProperty('ver_code',ver_code)
    properties.store(new FileOutputStream(file),"")
}

version = getVersion()
group="${mod_pgroup}.${mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_id}"

sourceCompatibility = targetCompatibility = ver_java // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = ver_java
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    //compile 'build/libs/Mekanism-1.11.2-9.3.4.313'
    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

def modinfoFile = 'src/main/resources/mcmod.info'
def tempDir = 'build/tmp/modifiedSources'
def outDir = 'classes/production/Spellcraft-Mod_main'
def buildDir = 'build/resources/main'
def versionFileName = 'mcmod.info'
def tempFile = tempDir+'/'+versionFileName

compileJava.doFirst {
    print "Build using Minecraft version "+project.minecraft.version
    println " - Accepting Forge Version "+project.minecraft.version
    println "Build using Project version "+project.version
    copy {
        from(modinfoFile) {
            expand 'version':project.version, 'mcversion':project.minecraft.version,'forgeversion':ver_forge+'+'
        }
        into(tempDir)
    }
    copy {
        from(tempFile)
        into(buildDir)
    }
    copy {
        from(tempFile)
        into(outDir)
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        //
        expand 'version':project.version, 'mcversion':project.minecraft.version,'forgeversion':ver_forge+'+'
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = ''
    from sourceSets.main.output
    from sourceSets.api.output
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Built-On": project.minecraft.version
    )
}
